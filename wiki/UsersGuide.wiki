#summary User's guide to developing with bct-cpp.


= Memory Management =
  * Some bct-cpp functions return pointers to `gsl_vector` or `gsl_matrix`.  It is the responsibility of the caller to free the memory associated with these pointers.
  * Some bct-cpp functions take optional "double pointer" arguments.  These arguments are used to pass additional returns back to the caller and must be freed by the caller.  If the additional returns are not needed, the caller may pass `NULL` to the function.  A default value of `NULL` is often provided in the bct-cpp function prototype.

Pointers to both `gsl_vector` and `gsl_matrix` may be freed by calling `bct::gsl_free`, a convenience method that calls either `gsl_vector_free` or `gsl_matrix_free` based on the type of its argument.

Avoid usage such as the following:
{{{
using namespace bct;
double s = sum(sum(triu(m));
}}}
The call to `triu` returns a pointer to a newly allocated `gsl_matrix`.  The inner call to `sum` returns a pointer to a newly allocated `gsl_vector`.  The memory associated with both of these returns must be freed to avoid a memory leak:
{{{
using namespace bct;
gsl_matrix* triu_m = triu(m);
gsl_vector* sum_triu_m = sum(triu_m);
double s = sum(sum_triu_m);
gsl_free(triu_m);
gsl_free(sum_triu_m);
}}}


= Status Checking =

By default, bct-cpp checks the status of any connection matrix passed to a specialized function (i.e., one such as `bct::clustering_coef_bu` which is only intended to work on binary undirected matrices).  If this status check fails, a message is printed to `stderr`, but the function still attempts to complete the calculation.  To disable this behavior and avoid the minor computational overhead, call `bct::set_safe_mode(false)`.


= Error Handling =

By default, GSL aborts program execution when an error is encountered.  bct-cpp can override this behavior by setting a custom GSL error handler.  This handler converts a GSL error to a `bct::bct_exception`.

`bct::init` must be called to enable this functionality.


= SWIG =

*WARNING: Even when using bct-cpp's Python bindings, you must explicitly free any memory associated with GSL data structures.  See below for examples.*

Python bindings for bct-cpp can be generated by calling `make` with the target `swig`.  This wraps all bct-cpp functions in a Python module.  In addition to the standard functions, this module includes `bct::from_gsl`, `bct::to_gslv`, and `bct::to_gslm`, which allow conversion between native Python lists and `gsl_vector*`s or `gsl_matrix*`s:
{{{
import bct
m = bct.to_gslv([[0, 1, 0], [0, 0, 1], [1, 0, 0]])
deg = bct.degrees_dir(m)
print bct.from_gsl(deg)  # [2.0, 2.0, 2.0]
bct.gsl_free(m)
bct.gsl_free(deg)
}}}

`bct::to_gslv` and `bct::to_gslm` may also be used to convert the cortical connectivity data sets (or any `double*`) to `gsl_matrix*`s:
{{{
import bct
fve30 = bct.to_gslm(bct.fve30, 30, 30)
print bct.density_dir(fve30)  # 0.35747126436781607
bct.gsl_free(fve30)
}}}