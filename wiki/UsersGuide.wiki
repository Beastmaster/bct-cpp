#summary User's guide to developing with bct-cpp.


= Memory Management =
  * Some bct-cpp functions return pointers to `gsl_vector` or `gsl_matrix`.  It is the responsibility of the caller to free the memory associated with these pointers.
  * Some bct-cpp functions take optional pointer arguments.  These arguments are used to pass additional returns back to the caller.  It is the responsibility of the caller to preallocate sufficient memory before the call and free this memory after its use.  If the additional returns are not needed, the caller may pass `NULL` to the function.  A default value of `NULL` is often provided in the bct-cpp function prototype.

Pointers to both `gsl_vector` and `gsl_matrix` may be freed by calling `bct::gsl_free`, a convenience method that simply checks the type of its argument and calls either `gsl_vector_free` or `gsl_matrix_free`.

Avoid usage such as the following:
{{{
using namespace bct;
double s = sum(sum(triu(m));
}}}
The call to `triu` returns a pointer to a newly allocated `gsl_matrix`.  The inner call to `sum` returns a pointer to a newly allocated `gsl_vector`.  The memory associated with both of these returns must be freed to avoid a memory leak:
{{{
using namespace bct;
gsl_matrix mu = triu(m);
gsl_vector v = sum(mu);
double s = sum(v);
gsl_free(mu);
gsl_free(v);
}}}

= Error Handling =

By default, GSL aborts program execution when an error is encountered.  BCT can override this behavior by setting a custom GSL error handler.  This handler converts a GSL error to one of two possible exceptions: `out_of_memory_exception` for failed allocations and `gsl_exception` for other errors.

BCT's `init` function must be called to enable this functionality.